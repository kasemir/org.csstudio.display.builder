/* Style sheet used by Java FX representations
 */

/* LEDRepresentation */
.led
{
    -fx-stroke-width: 2.11;
    -fx-stroke-type: inside;
    -fx-stroke: linear-gradient(to bottom right, #6E6F6E, #E7E6E5);
}
.led_flat
{
    -fx-stroke-width: 2.44;
    -fx-stroke-type: inside;
    -fx-stroke: rgba(0, 0, 0, 0.7);
}
.led_label
{
    /* Move left to start on top of the border */
    -fx-label-padding: 0 0 0 -2;
    /* Clip, don't add "...", to see most of text that doesn't fit the LED */
    -fx-text-overrun: clip;
}

/* AutocompleteMenu: menu items */
.ac-menu-item
{
}

.ac-menu-label /* result provider labels (e.g. "History") */
{
    -fx-font-weight:bold;
}

/* Default button padding in modena.css:
 * .button
 * {
 *  -fx-padding: 0.333333em 0.666667em 0.333333em 0.666667em; (top right bottom left)
 * }
 * Compared to BOY, this reduces many button "labels" to "lab...".
 * Since button labels are centered anyway,
 * setting the left and right padding to near 0em makes no visual
 * difference for shorter labels, while at the same time allowing
 * for labels that are as wide as the button.
 * Removing the top/bottom padding helps with drop-down buttons,
 * while again no impact on "small" text because it's centered anyway.
 * Enabling wrap since that's what BOY did with larger labels,
 * using clip instead of "..." to see more of the text.
 */
.action_button
{
    -fx-padding: 0em 0.1em 0em 0.1em;
    -fx-wrap-text: true;
    -fx-text-overrun: clip;
    -fx-text-alignment: center;
}

/* Same for the menu button,
 * which uses a label inside the button
 */
.action_button > .label
{
    -fx-padding: 0em 0em 0em 0.2em;
    -fx-wrap-text: true;
    -fx-text-overrun: clip;
}

/* Action buttons with multiple actions become a MenuButton
 * with popup items for each action.
 * The text fill of that context menu uses a ladder()
 * to become black vs. white based on the background color
 * .. of the _button_, while the background of the context menu
 * remains white.
 * This can result in white text on white background.
 *  -> Force black text for the context menu.
 *
 * See MenuButtonDemo
 */
.action_button_item .label
{
    -fx-text-fill: black;
}


/** Allow more room for text in combo box */
.combo-box > .list-cell
{
    -fx-padding: 0em 0em 0em 0.2em;
    -fx-wrap-text: true;
    -fx-text-overrun: clip;
}

/** Embedded display uses a ScrollPane.
 *  That pane has a 'background' which only appears as a small rim.
 *  The bulk is handled by a 'viewport' inside the skin,
 *  which is hard to access since lookup(".viewport") only works
 *  after the widgets have been rendered.
 *
 *  -> Make the embedded display scroll pane
 *     transparent and handle all coloring
 *     via the 'inner' pane in the code.
 */
.embedded_display
{
    /* Hide small border around scroll pane, see
     * http://stackoverflow.com/questions/17540137/javafx-scrollpane-border-and-background/17540428#17540428
     */
    -fx-background-color: transparent;
}
.embedded_display > .viewport
{
    -fx-background-color: transparent;
}

/* NavigationTabs:
 * tabregion with buttons; horizontal or vertical(default).
 * body contains the embedded widgets.
 */
 
.navtab_tabregion
{
    -fx-background-color: transparent;
}
 
.navtab_button
{
    -fx-padding: 0em 0em 0em 0em;
    /* 'vertical': Attach to body on right, rounded corners on left
     * The right-inset=3/4/5 leaves a gap between the inactive tab and the body
     */
    -fx-background-color: -fx-outer-border, -fx-inner-border, -fx-body-color;
    -fx-background-insets: 1 3 0 0, 2 4 1 1, 3 5 2 2;
    -fx-background-radius: 3 0 0 3, 2 0 0 2, 1 0 0 1;
}

.navtab_button:selected
{
    /* The right-inset=-1 so that it reaches into the body */
    -fx-background-insets: 1 -1 0 0, 2 -1 1 1, 3 -1 2 2;
}

.navtab_button:horizontal
{
    /* 'horizontal': Attach to body on bottom, rounded corners on top
     * The bottom-inset=3/4/5 leaves a gap between the inactive tab and the body
     */
    -fx-background-insets: 0 1 3 0, 1 2 4 1, 2 3 5 2;
    -fx-background-radius: 3 3 0 0, 2 2 0 0, 1 1 0 0;
}

.navtab_button:horizontal:selected
{
    /* The bottom-inset=-1 so that it reaches into the body */
    -fx-background-insets: 0 1 -1 0, 1 2 -1 1, 2 3 -1 2;
}

.navtab_scroll
{
    /* Color of the scroll pane's border */
    -fx-background-color: transparent;
}

.navtab_scroll > .viewport
{
    /* Color of the scroll pane's content */
    -fx-background-color: transparent;
}

.navtab_body
{   
    -fx-border-color: -fx-outer-border;
    -fx-border-radius: 2;
    -fx-border-width: 1;
    -fx-padding: 4;
}

/** Default text-input padding in modena.css:
 * .text-input
 *  -fx-padding: 0.333333em 0.583em 0.333333em 0.583em; (top right bottom left)
 * .text-area .content
 *  -fx-padding: 0.25em 0.583em 0.25em 0.583em;
 *  Similar to .button, this reduces the visible text compared to BOY displays.
 *  It's still a pleasant padding for text fields
 *  in the property pane etc.,
 *  to only changing padding in custom .text_entry,
 *  not the underlying .text-input and .text-area 
 */
.text_entry
{
   -fx-padding: 0em 0em 0em 0em;
}
.text_entry .content
{
   -fx-padding: 0em 0em 0em 0em;
}

/** Used for TextUpdate as well as Label
 *  (can't use ".label", wanted to avoid
 *   yet another class)
 */
.text_update
{
   -fx-text-overrun: clip;
}

/* Default button padding in modena.css is white-on-black */
.tooltip
{
    -fx-background: rgba(231,243,253);
    -fx-text-fill: black;
    -fx-background-color: rgba(231,243,253,0.8);
    -fx-background-radius: 6px;
    -fx-background-insets: 0;
    -fx-padding: 0.3em 0.35em 0.3em 0.35em;
    -fx-font-size: 10pt;
}

/* Original split pane divider is too thick. */
.split-pane > .split-pane-divider
{
    -fx-padding: 0 0.095em 0 0.095em;
    -fx-color: derive(-fx-base,-11.11%);
}

/* Clicking the "Custom Colors..." link
 * in the color picker can hang the application on Linux.
 * https://github.com/kasemir/org.csstudio.display.builder/issues/339
 */
.color-picker .color-palette .hyperlink, .color-picker .color-palette .separator
{
    visibility: hidden;
}
